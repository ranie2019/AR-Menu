<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Visualizador 3D com Botões</title>
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/AR-js-org/AR.js/aframe/build/aframe-ar.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/aframe-gesture-detector@3.3.0/dist/aframe-gesture-detector.min.js"></script>
    <style>
      body { margin: 0; overflow: hidden; }
      .btn {
        position: absolute;
        font-size: 30px;
        background: black;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        z-index: 999;
      }
      #prevBtn { left: 10px; bottom: 10px; }
      #nextBtn { right: 10px; bottom: 10px; }
      #loadingIndicator {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 30px;
        color: white;
        z-index: 1000;
      }
    </style>
  </head>

  <body>
    <button id="prevBtn" class="btn" onclick="changeModel(-1)">◀️</button>
    <button id="nextBtn" class="btn" onclick="changeModel(1)">▶️</button>

    <div id="loadingIndicator">Carregando...</div>

    <a-scene
      embedded
      arjs="sourceType: webcam; debugUIEnabled: false; markerType: pattern;"
      vr-mode-ui="enabled: false"
      gesture-detector
    >
      <a-entity id="modelContainer"
                position="0 0 -3"
                rotation="0 0 0"
                scale="1 1 1"
                animation="property: rotation; to: 0 360 0; loop: true; dur: 8000; easing: linear"
                gesture-handler>
      </a-entity>

      <a-camera position="0 1.6 0"></a-camera>
    </a-scene>

    <script>
      const models = [
        'champagne',
        'heineken',
        'redbull',
        'fizzydrink',
        'chocolatecupcake',
        'sundae',
        'pizza'
      ];

      let currentIndex = 0;

      function loadModel(name) {
        const container = document.querySelector('#modelContainer');
        const loadingIndicator = document.querySelector('#loadingIndicator');

        loadingIndicator.style.display = 'block';
        container.removeAttribute('gltf-model');

        console.log(`Carregando o modelo: https://ar-menu-models.s3.amazonaws.com/ar-models/${name}.glb`);

        fetch(`https://ar-menu-models.s3.amazonaws.com/ar-models/${name}.glb`)
          .then(response => response.blob())
          .then(blob => {
            const url = URL.createObjectURL(blob);
            container.setAttribute('gltf-model', url);
            container.setAttribute('scale', '1 1 1');
            loadingIndicator.style.display = 'none';
          })
          .catch(error => {
            console.error('Erro ao carregar o modelo:', error);
            loadingIndicator.innerText = 'Erro ao carregar o modelo';
          });
      }

      function changeModel(direction) {
        currentIndex = (currentIndex + direction + models.length) % models.length;
        loadModel(models[currentIndex]);
      }

      loadModel(models[currentIndex]);

      AFRAME.registerComponent('gesture-handler', {
        schema: { enabled: { default: true } },
        init: function () {
          this.scaleFactor = 1;
          this.el.sceneEl.addEventListener('pinchmove', this.onPinchMove.bind(this));
        },
        onPinchMove: function (event) {
          if (!this.data.enabled) return;
          this.scaleFactor *= event.detail.scale;
          this.scaleFactor = Math.max(0.1, Math.min(this.scaleFactor, 5)); // Limita escala
          this.el.object3D.scale.set(this.scaleFactor, this.scaleFactor, this.scaleFactor);
        }
      });
    </script>
  </body>
</html>
